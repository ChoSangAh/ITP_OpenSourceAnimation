//  Render, Email, Increment Save and Shutdown v1.02// based on Render & Email and Increment and Save by Adobe//	February 2008//  Lloyd Alvarez  lloyd@aescripts.com//////version history////1.02 added mac sleep option - June 2008//1.01 added windows shutdown//1.0 initial release mac only shutdown{/////////////////////////USER VARIABLES///////////////////////////////////// Apparently different flavors of windows have different ways of issuing the shutdown command// If your machine is not shutting down after the render is finished you might need to research // what the correct command to shutdown your machine is.  You can refer to this webpage for more // info: http://www.aumha.org/win5/a/shutcut.php// That webpage also points to a freeware utility that apparently will shutdown any windows machine.// You can download that utility here: http://www.aumha.org/downloads/shutdown.zip// If you install that utility, you will need to change the windowsShutdownCommand below // to be this: "shutdown -u -t 30"var windowsShutdownCommand = "SHUTDOWN -s -t 30";//////  On Mac you can choose: shut down or sleep.  Change the text below to whichever you prefer.//  Make sure it's lower case and in the case of shut down to put a space between shut and down.////var macOnlyShutdownCommand = "shut down";  //														/////////////////////////////////////////////////////////////////////////////	function isSecurityPrefSet(){		var securitySetting = app.preferences.getPrefAsLong("Main Pref Section",						"Pref_SCRIPTING_FILE_NETWORK_SECURITY");		return (securitySetting == 1);	}function saveAndIncrement() {if (!app.project.file) {	alert ("This project must be saved before running this script.");} else {	var currFile = app.project.file;	var currFileName = currFile.name;	var extPos = currFileName.lastIndexOf(".");	var ext = "";		if (extPos != -1) {		ext = currFileName.substring(extPos, currFileName.length);		currFileName = currFileName.substring(0, extPos);	}		var incrementer = 0;	if (currFileName.charAt(currFileName.length -4) == "_") {		//Assume the incrementer has run before if underscore is the fourth character from the end.		//This is the case for files with 3 digit extensions.		incrementer = currFileName.substring(currFileName.length - 3, currFileName.length);		currFileName = currFileName.substring(0, currFileName.length -4);	}		incrementer++;	var istring = incrementer + "";	if( (incrementer / 10) < 1.0) {		istring = "0" + istring;	}	if( (incrementer / 100) < 1.0) {		istring = "0" + istring;	}		var newFile = File(currFile.path + "/" + currFileName + "_" + istring + ext);	//alert(newFile.fsName);	app.project.save(newFile);}} // CLOSE SAVE & INCREMENT FUNCTION	var safeToRunScript = true;		safeToRunScript = app.project != null;	if (!app.project.file) {	alert ("This project must be saved before running this script.");	safeToRunScript = false;	}		if (safeToRunScript) {		//check the render queue and make certain at least one item is queued		safeToRunScript = false;		for (i = 1; i <= app.project.renderQueue.numItems; ++i) {			if (app.project.renderQueue.item(i).status == RQItemStatus.QUEUED) {				safeToRunScript = true;				break;			}		}		if (! safeToRunScript) {			alert ("You do not have any items set to render.");		}		if (!isSecurityPrefSet()) {		var prefWarning = "This script requires the scripting security preference to be set.\n" +		"Go to the \"General\" panel of the application preferences and make sure " +          "\"Allow Scripts to Write Files and Access Network\" is checked.";			 		alert(prefWarning);	safeToRunScript = false;	}	}		if (safeToRunScript) {		// check and see if we can access the network to send email		// test before the render so the person doesn't go home and wait for an email...				// Load code from a file with handy emailing methods:		var emailCodeFile = new File("email_methods.jsx");		emailCodeFile.open("r");			eval( emailCodeFile.read() );		emailCodeFile.close();						// this address isn't actually used until send() is called, but specify the loopback for now		// this is a test to see if network access is enabled in the preferences 		// [24803] cprosser		{ 			var email_test = new EmailSocket("127.0.0.1");		}		// The script email_setup.jsx will prompt the user and establish the settings.		// We'll only run it now if we don't have the settings already.  		// If you want to change the settings, you can run email_setup.jsx as a 		// separate script at any time.		var settings = app.settings;		if ( !settings.haveSetting("Email Settings", "Mail Server") ||			 !settings.haveSetting("Email Settings", "Reply-to Address") ||			 !settings.haveSetting("Email Settings", "Render Report Recipient")){				// We don't have the settings yet, so run email_setup.jsx			// to prompt for them 			var email_setupfile = new File("email_setup.jsx");			email_setupfile.open("r");				eval( email_setupfile.read() );			email_setupfile.close();		}			var myQueue = app.project.renderQueue //creates a shortcut for RQ				// Call render		myQueue.render();					// Now rendering is complete.				saveAndIncrement();				// Create a string for the mail message that contains:		// Start time (date)		// Render time of each item in the queue		// Total render time		var projectName = "Unsaved Project";		if (app.project.file) {			projectName = app.project.file.name;		}		// can't have bare LF in email, always put \r before \n or some		// servers will die.		var myMessage = "Rendering of " + projectName + " is complete.\r\n\r\n";				// Email the message.		// We'll use three Settings to determine how to mail.		// The section will be named "Email Settings"		// The 3 settings will be named:		//	"Mail Server" - the mail server to use when sending mail.		//	"Reply-to Address" - the address from which the mail will be sent		//	"Render Report Recipient" - the address to which mail will be sent.			if ( !settings.haveSetting("Email Settings", "Mail Server") ||			 !settings.haveSetting("Email Settings", "Reply-to Address") ||			 !settings.haveSetting("Email Settings", "Render Report Recipient")){			alert("Can't send an email, I don't have all the settings I need. Aborting.");		} else {			try {			// send the email					var serverSetting = settings.getSetting("Email Settings", "Mail Server");				var fromSetting = settings.getSetting("Email Settings", "Reply-to Address");				var toSetting   = settings.getSetting("Email Settings", "Render Report Recipient");				var authUser;				var authPass;								if (app.settings.haveSetting("Email Settings", "Auth User")) {					authUser = app.settings.getSetting("Email Settings", "Auth User");				}								if (app.settings.haveSetting("Email Settings", "Auth Pass")) {					authPass = app.settings.getSetting("Email Settings", "Auth Pass");				}								//ack, can't delete settings...				if (authUser == "") {					authUser = null;					authPass = null;				} //								var myMail = new EmailSocket(serverSetting);												if (! myMail.send (fromSetting, toSetting, "AE Render Completed", myMessage, authUser, authPass) ) {					alert("Sending mail failed");				}//			} catch (e) {				alert("Unable to send email.\n" + e.toString());			}		}	if ($.os.indexOf("Windows") == -1){	var restartCommand = "osascript -e 'tell application \"System Events\" to " + macOnlyShutdownCommand + "'";	 system.callSystem(restartCommand);	 } else {		 system.callSystem("cmd /c \""+windowsShutdownCommand+"\""); 		 }	}} // CLOSE MAIN {						