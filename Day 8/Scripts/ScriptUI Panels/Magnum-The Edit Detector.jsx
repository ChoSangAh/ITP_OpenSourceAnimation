// Magnum EI, The Edit Detector  v1.05// © December 2007 by Lloyd Alvarez  (lloyd@shake.com)// ////  This script automatically detects edits in footage.//  //version history://1.05 added host language detection, fixed progress bar bug on mac, CS4 only.  09/2008//1.04 fixed detection algorithm-DO NOT USE 1.03 as it yields too many false positives!  02/2008//1.03 optimized cut detection algorithm, fixed no selected layer bug  - 02/2008//1.02 minor bug fix that incorrectly identified Comp's as a null - 01/2008//1.01 minor bug fix to add error correction for null and stretched layers - 01/2008//1.0 	initial release - 01/2008{function Magnum(thisObj)	{		var MagnumData = new Object();		MagnumData.scriptName = "Magnum, EI - the Edit Detector";		MagnumData.version = "1.05";				MagnumData.strHelp = "?";		MagnumData.thresholdTxt = "Detect Level:";		MagnumData.thresholdDef = 1.5;		MagnumData.thresholdHelpTipTxt = "Lower values make it more sensitive to finding edits, higher values makes it less sensitive.";		MagnumData.resultTxt = "Result:";		MagnumData.resultOptns = '["Place markers on layer", "Split into new layers"]';		MagnumData.progressTxt = "";		MagnumData.progressMax = 100;		MagnumData.strDoItBtn = "DO IT!";		MagnumData.strCancelBtn = "Stop";				MagnumData.editName = "edit";		MagnumData.compSuffixTxt =	"Comp Suffix:";		MagnumData.compSuffix = "_Magnumd";				if ($.os.indexOf("Windows") != -1) {var cmd = "CTRL+";} else {var cmd = "Command+";}				MagnumData.startWarningTxt = "Now listen Higgins,\n" +													"Depending on the speed of your computer and the size and\n" +													"length of your footage, this might take a while.\n\n" +													"I highly recommend you open the Info Panel (" + cmd + "2)\nto monitor the progress.\n\n"+													"Unfortunately you can't cancel the process once it has started.\n\n" +													"Do you want me to continue?";		MagnumData.finishedTxt =	"Wouldn't you believe it Higgins??\n\n" +												"I found %e" +												"Not bad for a day's work, huh?";														MagnumData.finishedNoneTxt =	"Gosh darnit Higgins!!  I couldn't find any edits!!\n\n" +												"You might want to lower the Detect Level and try again.\n\n" +												"I think I need a drink now!";														MagnumData.compNameWarning = "\n\nBtw, the Comp name was trimmed because After Effects\nhas an internal 31 character limit.  Not my fault Higgins!";		MagnumData.strAboutTitle = "About " + MagnumData.scriptName;		MagnumData.strAbout = MagnumData.scriptName + " v." + MagnumData.version + "\n" +											"Copyright © 2008 Lloyd Alvarez   <http://aescripts.com>\n\n" +											"This script automatically detects edits in footage. \n\n" + 											"INSTRUCTIONS:\n"+											"You must have only one layer selected in a comp.\n" +											"The script looks for edits within the work area of that comp. \n" +											"The default detect level of 1.5 is a good place to start. \n" +											"Lower values make it more sensitive to finding edits. \n" +											"So if it didn't find all the edits, undo and lower the level. \n" +											"If it found more edits than it should raise the level. \n" +											"Once the script is done analyzing the footage it can\n" +											"add markers to the layer or split the layer into\n" +											"new layers at every cut.\n\n" +											"Note: The script palette can be used as a dockable panel\nby placing the script in the 'ScriptUI Panels' subfolder of the\nScripts folder (if one doesn't already exist, create one),\nand then choosing this script from the Window menu."			MagnumData.strErrSecurityPrefNotEnabled = "Please enable the \"Allow Scripts to Write Files and Access Network\" option in the General Preferences dialog box, and run this script again.";		MagnumData.strErrMinAE80 = "This script requires Adobe After Effects CS3 or later.";		MagnumData.strErrLanguageWin =  "This script requires After Effects to run in English.\n" +													"To force AE to run in U.S. english do the following:\n" +													"At your desktop or your quickstart bar, right click the shortcut \n" +													"of your After Effects installation and select Properties. \n" +													"Under Target, where you see the path to AfterFX.exe, \n" +													"add the following text at the very end, behind quotes \n" +													"if present:  -L EN \n" +													"Relaunch After Effect and run the script again";			MagnumData.strErrLanguageMac  = "This script requires After Effects to run in English\n" +													"To force AE to run in U.S. English do the following:\n" +													"Quit After Effects.\n" +													"Do a get info (⌘-i) on the After Effects application\n" +													"Under the languages section, uncheck all languages except\n" +													"US English.  Relaunch After Effects and run the script again.";				MagnumData.strErrSelItemMoreThanOne = "Please make sure the layer (not more than one) is selected in the timeline panel.";		MagnumData.strErrSelItemNull = "You need to select a layer in a comp and make sure the timeline panel is active.";		MagnumData.strErrSelItemAV = "You must make your selection in the comp panel, not in the project panel.";		MagnumData.strErrFootageItem = "Yo Higgings! The selected layer must be footage, it can't be a solid, null, camera or light.";		MagnumData.strErrStretchedLayer = "Listen Higgins, I know this might sound dissapointing, but I don't work so well with stretched layers, can you pre-compose or use time-remapping instead?";						// Magnum_buildUI()		// Function for creating the user interface		function Magnum_buildUI(thisObj)		{						var pal = (thisObj instanceof Panel) ? thisObj : new Window("palette", MagnumData.scriptName, undefined, {resizeable:true});			if (pal != null)			{				var res = 				"group { \					orientation:'column', alignment:['left','fill'], alignChildren:['left','top'], spacing:5, margins:[0,0,0,0], \					threshold: Group { \						alignment:['left','top'], alignChildren:['left','top'], \						lbl: StaticText { text:'" + MagnumData.thresholdTxt + "', preferredSize: [70,20] }, \						sldr: Slider { minvalue:0, maxvalue:5, preferredSize: [128,20], helpTip:'" + MagnumData.thresholdHelpTipTxt + "' }, \						val: StaticText{ text:'" + MagnumData.thresholdDef + "' }, \					}, \					result: Group { \						alignment:['left','top'], alignChildren:['left','top'], \						lbl: StaticText { text:'" + MagnumData.resultTxt + "', preferredSize: [70,20]}, \						val: DropDownList { properties:{items:" + MagnumData.resultOptns + "}, alignment:['fill','top'] }, \					}, \					progress: Group { \						alignment:['fill','top'], alignChildren:['fill','top'], \						val: Progressbar {  }, \					}, \					btns: Group { \						alignment:['fill','top'], alignChildren:['right','top'], \						help: Button { text:'" + MagnumData.strHelp + "', alignment:['left','top'] }, \						cancelBtn: Button {text: '" + MagnumData.strCancelBtn + "', alignment:['right','top'], preferredSize: [60,25] }, \						doItBtn: Button { text: '" + MagnumData.strDoItBtn + "', alignment:['right','top'], preferredSize: [60,25] }, \						},\				}";											pal.margins = [10,10,10,10];				pal.grp = pal.add(res);								var palGfx = pal.graphics;  				var darkColorBrush = palGfx.newPen(palGfx.BrushType.SOLID_COLOR, [0,0,0], 1); //force the text color to always be black, so it can appear just fine regardless of the UI brightness.				pal.grp.threshold.sldr.graphics.foregroundColor = darkColorBrush;				//pal.grp.suffix.val.graphics.foregroundColor = darkColorBrush;				pal.grp.result.val.graphics.foregroundColor = darkColorBrush;												pal.grp.btns.help.preferredSize.width = pal.grp.btns.help.maximumSize.width = pal.grp.btns.help.minimumSize.width = 30;				pal.grp.btns.help.onClick = function () {alert(MagnumData.strAbout, MagnumData.strAboutTitle);}								pal.grp.btns.doItBtn.onClick = onDoItClick;				/*var myStop = false;				pal.grp.btns.cancelBtn.onClick = function () {myStop = true;} //stop process if Stop button is clicked				*/				pal.layout.layout(true);				pal.grp.minimumSize = pal.grp.size;												pal.grp.threshold.sldr.value = MagnumData.thresholdDef;				pal.grp.threshold.val.text = pal.grp.threshold.sldr.value;				pal.grp.result.val.selection = 1;				pal.grp.btns.cancelBtn.hide();				pal.grp.progress.hide();												pal.grp.threshold.sldr.onChanging = function () {					this.parent.parent.threshold.val.text = this.parent.parent.threshold.sldr.value;					}							}						return pal;		}	function doTheWork(selItem,threshold,result,progress,cancelButton) {				var proj = app.project;		var myComp = proj.activeItem;				// my layer is the only item in the array		var myLayer = selItem[0];		//find out which layer number it is		var myIndex = myLayer.index		//duplicate the layer		myLayer.duplicate();		//precompose the layers into a working comp that we will delete later		var myPreComp = myComp.layers.precompose([myIndex+1], "_Magnum_at_Work_",false);  // we precompose using the "Leave All Attributes" (false) option so that we perform all the operations at the footage's native size and frame rate not the current comp's.		//duplicate the layer in the pre-comp 		var myDupLayer = myPreComp.layer(1).duplicate();		//set the transfer mode to Classic Difference		myDupLayer.blendingMode = BlendingMode.CLASSIC_DIFFERENCE;		//slide the top layer back 1 frame		var oneFrame = 1/myComp.frameRate;		myDupLayer.startTime = oneFrame * -1; //move the top layer back 1 frame		//add shift channels effect to the precomp to be able to give sample image a luminance value		var myEffect = myComp.layer(myIndex+1).property("Effects").addProperty("ADBE Shift Channels");		//set alpha to luminance		myEffect.property("Take Alpha From").setValue(5);		//add a dummy slider to hold the threshold value		var myThresEffect = myComp.layer(myIndex+1).property("Effects").addProperty("ADBE Slider Control");		//set threshold to value from script UI		myThresEffect.property("Slider").setValue(threshold);		//add another dummy effect to perform the sampleImage calculations in an expression		var myExpEffect = myComp.layer(myIndex+1).property("Effects").addProperty("ADBE Slider Control");		//add the expression, this is where the magic happens, it uses sampleImage which can't be called directly from scripting to get the luminance values from the frame before and the frame after and returns the difference value, if it's over the threshold we have a cut		myExpEffect.property("Slider").expression = 	"p=[width/2,height/2];\n " +																		"frames=timeToFrames(t = time + thisComp.displayStartTime, fps = 1.0 / thisComp.frameDuration, isDuration = false); \n" +																		"frameBefore = framesToTime(frames-1, fps = 1.0 / thisComp.frameDuration); \n" +																		"s=sampleImage(p, radius = [width,height], postEffect = true, t = time); \n"+																		"sb=sampleImage(p, radius = [width,height], postEffect = true, t = frameBefore); \n"+																									"thres=effect(\"Slider Control\")(\"Slider\");\n" +																		"diff=(sb[3]*100) - (s[3]*100); \n"+																		"c=0; "+																		"if (diff > thres) { c= 1} "+																		"c";				//need to calculate time in frames		var myWorkAreaInFrames = myComp.workAreaDuration * myComp.frameRate;		var myWorkAreaStartInFrames = myComp.workAreaStart * myComp.frameRate;		//let's figure out which layer is where		var magnum =  myComp.layer(myIndex+1);		var myOrigLayer = myComp.layer(myIndex);		var found = 0;  // reset the edit found counter				progress.value = 0;  // reset the progress bar		progress.maxvalue = (myWorkAreaInFrames-1);  //set the progress bar to equal the number of frames to be processed which is the same as the work area duration				 		//loop through all the frames in the Comp		for (i=1; i < myWorkAreaInFrames; i++) {		var myTime= ((myWorkAreaStartInFrames-1) + i) / myComp.frameRate;		var myResult = magnum.property("Effects").property(3).property(1).valueAtTime(myTime,false);				progress.value++;  //update the progress bar in the UI ***currently not working on Mac CS3, bug reported				if (app.version.substring(0,1) >= 9) {		cancelButton.window.update();  // This call refreshes the UI and fixes the Mac CS3 bug, but works in CS4 only.		}			//if (i%30 == 0) {alert("The progress bar does not update until you OK this prompt");}  //DEBUGGING COMMENT OUT FOR NORMAL OPERATION				writeLn("Processing frame " + i + " out of " + Math.round(myWorkAreaInFrames-1)); //write the progress to the info window		clearOutput(); //clear the line after it's written		//if we find an edit, put it through this conditional		if (i >1 && myResult == 1) { // i>1 is there so that it doesn't consider the first frame a cut since it usually is one but it doesn't need to be marked			found++;			if (result == 0) {    //depending on the pref from the UI we either set markers or split layers			//this is what we do if the set markers option is set			//you need to create a comment first			var newMarkerComment = new MarkerValue(MagnumData.editName + found);			//then assign it to a marker on a layer			var newMarker = myOrigLayer.property("Marker").setValueAtTime(myTime, newMarkerComment);			}else{				//this is what we do if the split layers pref is set, easy since the time marker is at the current time of the edit				var saveOutPoint = myComp.layer(myIndex).outPoint;  //first we need to save the original outPoint of the layer, I'll explain why below				myComp.layer(myIndex).duplicate();				myComp.layer(myIndex).inPoint = myTime;     //makes no sense to but when I set the inPoint it also sets the outPoint at the same time making a 1 frame long layer				myComp.layer(myIndex).outPoint = saveOutPoint;  //so I have to reset the outPoint the original place..  this smells like a bug to me.				myComp.layer(myIndex+1).outPoint = myTime;				} 			//alert("found a frame");  //DEBUGGING COMMENT OUT FOR NORMAL OPERATION			writeLn("Found an edit at frame " + i + "!"); 			} //close myResult conditional		} // close for loop	//remove our working comp	myPreComp.remove();	//make sure our grammar is correct if we only find 1 edit	if (found == 1) {var plural = ""} else {var plural = "s"}	//issue an alert when the whole thing is done	var finishedTxt = MagnumData.finishedTxt.replace("%e", "" + found + " " + MagnumData.editName + plural + "!!\n\n");	if (found ==0) {alert (MagnumData.finishedNoneTxt);} else {alert (finishedTxt);}	//deselect the original footage item	selItem.selected = false;	//select the newly created Comp	myComp.selected = true;	}		function onDoItClick() {				if (app.project == null)				return;						var proj = app.project;		var comp = app.project.activeItem;				if ((comp == null) || !(comp instanceof CompItem)) //make sure it's  a layer in an existing comp		{			alert(MagnumData.strErrSelItemAV);			return;		}						if (comp.selectedLayers.length == 0) // make sure something is selected		{			alert(MagnumData.strErrSelItemNull);			return;		}			var selItem = comp.selectedLayers;		if ((selItem.length > 1)) //make sure only 1 layer is selected			{				alert(MagnumData.strErrSelItemMoreThanOne);				return;			}		if ((selItem[0].source.file == null)&& !(comp instanceof CompItem)) //make sure it's not a camera or light			{				alert(MagnumData.strErrFootageItem);				return;			}				if (selItem[0].stretch != 100)			{				alert(MagnumData.strErrStretchedLayer); //make sure it's not a stretched layer				return;			}						var threshold = this.parent.parent.threshold.sldr.value;		var result = this.parent.parent.result.val.selection;		//var suffix =  this.parent.parent.suffix.val.text;		var progress = this.parent.parent.progress.val;		var cancelButton = this.parent.parent.btns.cancelBtn;		var doItButton = this.parent.parent.btns.doItBtn;				app.beginUndoGroup(MagnumData.scriptName);			progress.hide();		if ($.os.indexOf("Windows") == -1  &&  app.version.substring(0,1) < 9) {		var goAhead = confirm(MagnumData.startWarningTxt);  //due to a mac CS3 bug that doesnt display the progress bar in the palette, we warn to open the info palette. 		}else{		var goAhead = true;		}		if (goAhead){				this.parent.parent.btns.doItBtn.enabled = false;				this.parent.parent.progress.show(); //show the progress bar before calling the function				doTheWork(selItem,threshold,result,progress,cancelButton);				this.parent.parent.progress.hide(); //hide the progess bar after the work is done				this.parent.parent.btns.doItBtn.enabled = true;		}		app.endUndoGroup();				}	// main:				var goAhead = true;		var appVers = parseFloat(app.version);						// check to make sure we are running CS3 or above		if (appVers < 8)		{			alert(MagnumData.strErrMinAE80, MagnumData.scriptName);			 goAhead = false;		}				// check to make sure we are running in english					if (appVers >= 8 &&  appVers <9)  //cs3		{			if (app.language != Language.ENGLISH)				{					if ($.os.indexOf("Windows") == 1) {alert(MagnumData.strErrLanguageWin)}  //					else {alert(MagnumData.strErrLanguageMac)}			 goAhead = false;		}	}		if (appVers >= 9)  //cs4		{			 			if (app.isoLanguage != "en_US")				{					if ($.os.indexOf("Windows") == 1) {alert(MagnumData.strErrLanguageWin)}  //					else {alert(MagnumData.strErrLanguageMac)}			 goAhead = false;		}	}		if (goAhead)		{					var magnumPal = Magnum_buildUI(thisObj);			if ((magnumPal != null) && (magnumPal instanceof Window))			{				magnumPal.center();				magnumPal.show();			}		}	}			Magnum(this);	}